import java.util.HashMap;

class LRUCache
{
  HashMap<Integer, LRUnode> map = null;
  int cap;
  LRUnode head = null;
  LRUnode tail = null;

  public LRUCache(int capacity) 
  {
    this.map = new HashMap<>();
    this.cap = capacity;
  }

  public int get(int key)
  {
    if (!map.containsKey(key))
    {
      return -1;
    }
    LRUnode t = map.get(key);
    remove(t);
    setHead(t);
    return t.value;
  }

  public void put(int key, int value)
  {
    if (map.containsKey(key))
    {
      LRUnode t = map.get(key);
      t.value = value;
      remove(t);
      setHead(t);
    } 
    else
    {
      if (map.size() >= cap)
      {
        map.remove(tail.key);
        remove(tail);
      }
      LRUnode t = new LRUnode(key, value);
      setHead(t);
      map.put(key, t);
    }
  }

  // remove a LRUnode
  private void remove(LRUnode t)
  {
    if (t.prev != null)
    {
      t.prev.next = t.next;
    }
    else
    {
      head = t.next;
    }
    if (t.next != null)
    {
      t.next.prev = t.prev;
    }
    else
    {
      tail = t.prev;
    }
  }

  // set a LRUnode to be head
  private void setHead(LRUnode t)
  {
    if (head != null)
      head.prev = t;
    t.next = head;
    t.prev = null;
    head = t;
    if (tail == null)
      tail = head;
    
  }
}